#include "An1xPatch.h"

using namespace AN1x;

std::array<unsigned char, An1xPatch::SystemSize> An1xPatch::s_system {
	0x4, 0x0, 0x40, 0x4, 0x0, 0x0, 0x0, 0x7F, 0x0, 0x0, 0x10, 0x1, 0x1, 0x1, 0x7, 0x4, 0x40, 0xD, 0xC, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x0
};

An1xPatch::An1xPatch() : 
	m_data{ 0x49, 0x6E, 0x69, 0x74, 0x4E, 0x6F, 0x72, 0x6D, 0x61, 0x6C, 0x0, 0x1, 0x0, 0x0, 0x0, 0x6, 0x1, 0xC, 0x3C, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x2, 0x0, 0x4E, 0x0, 0xE, 0x1, 0x42, 0x0, 0x0, 0x0, 0x0, 0x11, 0x40, 0x28, 0x40, 0xA, 0x34, 0x40, 0x0, 0x0, 0x0, 0x3, 0x45, 0x5, 0x4B, 0x1F, 0x1F, 0x0, 0x5A, 0x1, 0x3, 0x0, 0x0, 0x0, 0x36, 0x0, 0x0, 0x0, 0x19, 0x0, 0x5, 0x0, 0xA, 0x2, 0x41, 0x0, 0x4F, 0x0, 0x12, 0x0, 0x2E, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x7, 0x32, 0x0, 0x64, 0x0, 0x64, 0x1, 0x4, 0x28, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x42, 0x3E, 0x40, 0x40, 0x3, 0x0, 0x44, 0x0, 0x0, 0x0, 0x57, 0x0, 0x0, 0x1F, 0x0, 0x40, 0x40, 0x0, 0x3, 0x40, 0x0, 0x0, 0x0, 0x40, 0x40, 0x64, 0x40, 0x40, 0x0, 0x1, 0x0, 0x0, 0x40, 0x40, 0x7F, 0x40, 0x40, 0x0, 0x1, 0x0, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x40, 0x7F, 0x55, 0x0, 0x0, 0x64, 0x19, 0x1, 0x20, 0x40, 0x40, 0x40, 0x0, 0x40, 0x7F, 0x24, 0x0, 0x69, 0x40, 0x40, 0x1, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x42, 0x3E, 0x40, 0x40, 0x3, 0x0, 0x44, 0x0, 0x0, 0x0, 0x57, 0x0, 0x0, 0x1F, 0x0, 0x40, 0x40, 0x0, 0x3, 0x40, 0x0, 0x0, 0x0, 0x40, 0x40, 0x64, 0x40, 0x40, 0x0, 0x1, 0x0, 0x0, 0x40, 0x40, 0x7F, 0x40, 0x40, 0x0, 0x1, 0x0, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x40, 0x7F, 0x55, 0x0, 0x0, 0x64, 0x19, 0x1, 0x20, 0x40, 0x40, 0x40, 0x0, 0x40, 0x7F, 0x24, 0x0, 0x69, 0x40, 0x40, 0x1, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x4, 0x8, 0x0, 0x0, 0x0, 0x0, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }

{}

unsigned char* An1xPatch::getParameterAddress(ParamType type, unsigned char parameter)
{
	return const_cast<unsigned char*>(const_cast<const An1xPatch*>(this)->getParameterAddress(type, parameter));
}

An1xPatch::An1xPatch(const std::vector<unsigned char> bulkMsg)
{
	constexpr static int msgSize = 1953;

	if (bulkMsg.size() != msgSize) return;

	constexpr static int headerSize = 9;

	for (int i = 0; i < PatchSize; i++)
	{
		m_data[i] = bulkMsg[i + headerSize];
	}
}

std::vector<unsigned char> An1xPatch::setParameter(ParamType type, unsigned char parameter, int value)
{

	auto paramAddress = getParameterAddress(type, parameter);

	auto msg = getHeader(type);

	msg.push_back(parameter);

	value += getOffset(type, parameter);

	if (AN1x::isTwoByteParameter(type, parameter)) {
		msg.push_back(value / 128);
		msg.push_back(value % 128);

		paramAddress[0] = value / 128;
		paramAddress[1] = value % 128;

	}
	else {
		msg.push_back(value);
		paramAddress[0] = value;
	}

	msg.push_back(0xF7);

	return msg;
}


bool An1xPatch::setSystemData(const std::vector<unsigned char>& bulkMessage)
{
	constexpr static int msgSize = 39;

	if (bulkMessage.size() != msgSize) return false;

	constexpr static int headerSize = 9;

	for (int i = 0; i < SystemSize; i++)
	{
		s_system[i] = bulkMessage[i + headerSize];
	}

	return true;
}

std::vector<unsigned char> An1xPatch::getDataMessage(ParamType type) const
{
	std::vector<unsigned char> result;

	switch (type)
	{
		case ParamType::System: return getSystemData();
		case ParamType::Common:
			result = { 0xF0, 0x43, 0x00, 0x5C, 0x0C, 0x68, 0x10, 0x00, 0x00 };
			for (int i = 0; i < CommonSize; i++) result.push_back(m_data[i]);
			break;
		case ParamType::Scene1:
			result = { 0xF0, 0x43, 0x00, 0x5C, 0x00, 0x74, 0x10, 0x10, 0x00 };
			for (int i = CommonSize; i < CommonSize + SceneSize; i++) result.push_back(m_data[i]);
			break;
		case ParamType::Scene2:
			result = { 0xF0, 0x43, 0x00, 0x5C, 0x00, 0x74, 0x10, 0x11, 0x00 };
			for (int i = CommonSize + SceneSize; i < CommonSize + (SceneSize*2); i++) result.push_back(m_data[i]);
			break;
		case ParamType::StepSq:
			result = { 0xF0, 0x43, 0x00, 0x5C, 0x00, 0x46, 0x10, 0xE, 0x00 };
			for (int i = CommonSize + (SceneSize*2); i < CommonSize + (SceneSize * 2) + SeqSize; i++) result.push_back(m_data[i]);
			break;
	}	

	AN1x::addCheckSum(result);

	return result;
}

int An1xPatch::getParameter(ParamType type, unsigned char param) const
{
	if (AN1x::isNull(type, param)) return 0;

	auto param_ptr = getParameterAddress(type, param);

	int value = param_ptr[0];

	if (AN1x::isTwoByteParameter(type, param))
	{
		value = param_ptr[0] * 128;
		value += param_ptr[1];
	}

	value -= AN1x::getOffset(type, param);

	return value;

}

void An1xPatch::setTrackData(const std::vector<int>& data)
{
	for (int i = 0; i < data.size(); i++)
	{
		m_data[AN1x::CommonParam::FreeEgData + i] = data[i];
	}
}

std::vector<int> An1xPatch::getTrackData() const
{
	auto param_ptr = getParameterAddress(ParamType::Common, AN1x::FreeEgData);

	std::vector<int> result;

	static constexpr int allTracksSize = 8 * 192;

	for (int i = 0;  i < allTracksSize; i++)
	{
		bool negative = param_ptr[i] == 0;
		
		i++;

		int value = param_ptr[i];

		if (negative) value -= 128;

		result.push_back(value);


	}

	return result;
}

std::string An1xPatch::getName() const
{
	std::string result;

	result.reserve(10);

	for (int i = 0; i < 10; i++)
	{
		result += m_data[i];
	}

	return result;
}

std::vector<unsigned char> An1xPatch::getSystemData()
{
	std::vector<unsigned char> result;

	result = { 0xF0, 0x43, 0x00, 0x5C, 0x00, 0x1C, 0x00, 0x00, 0x00 };
	
	for (auto value : s_system) result.push_back(value);

	addCheckSum(result);

	return result;
}


const unsigned char* An1xPatch::getParameterAddress(ParamType type, unsigned char parameter) const
{
	unsigned char* paramAddress = nullptr;

	static constexpr int dataOffsets[5]{
		0,
		0,
		CommonSize,
		CommonSize + SceneSize,
		CommonSize + (SceneSize * 2)
	};

	if (type == ParamType::System) {
		return &s_system[parameter];
	}
	else
	{
		int offset = dataOffsets[static_cast<int>(type)];

		return &m_data[offset + parameter];
	}
	return nullptr;
}
